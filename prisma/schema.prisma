generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  balances      Balance[]
  payments      Payment[]
  goals         Goal[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Balance {
  id            Int         @id @default(autoincrement())
  userId        String
  amount        Float
  createdAt     DateTime    @default(now())
  endDate       DateTime?
  interestRate  Float?
  name          String
  startDate     DateTime?
  subCategoryId Int
  user          User        @relation(fields: [userId], references: [id])
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  goalId        Int?
  goal          Goal?        @relation(fields: [goalId], references: [id])

  @@index([goalId])
  @@index([subCategoryId])
  @@index([userId])
}

model Payment {
  id        Int       @id @default(autoincrement())
  amount    Float
  createdAt DateTime  @default(now())
  name      String
  startDate DateTime?
  endDate   DateTime?
  isNet     Boolean
  repeats   Boolean
  repeatsIn Int

  subCategoryId Int
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])

  // categoryId Int
  // category   Category @relation(fields: [categoryId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  goalId Int?
  goal   Goal? @relation(fields: [goalId], references: [id])

  @@index([goalId])
  // @@index([categoryId])
  @@index([subCategoryId])
  @@index([userId])
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String
  subCategories SubCategory[]
  // payments Payment[]
}

model SubCategory {
  id         Int       @id @default(autoincrement())
  name       String
  categoryId Int
  category   Category  @relation(fields: [categoryId], references: [id])
  payments   Payment[]
  balances   Balance[]

  @@index([categoryId])
}

model Goal {
  id     Int    @id @default(autoincrement())
  amount Float 
  deadline DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  payments Payment[]
  balances Balance[]

  @@index([userId])
}
