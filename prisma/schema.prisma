generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  balances      Balance[]
  payments      Payment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Balance {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  // Inerited values from Data 

  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  subCategoryId Int

  name   String
  amount Decimal

  // Unique values for a Balances
  startDate    DateTime?
  endDate      DateTime?
  interestRate Decimal?

  @@index([subCategoryId])
}

model Payment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  subCategoryId Int

  name   String
  amount Decimal

  // Unique values for Payments
  recurring    Boolean
  paidOn       DateTime?
  nextPaidOn   DateTime?
  interestRate Decimal?

  @@index([subCategoryId])
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String
  subCategories SubCategory[]
}

model SubCategory {
  id         Int      @id @default(autoincrement())
  name       String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  payments Payment[]
  balances Balance[]

  @@index([categoryId])
}
